// automatically generated by the FlatBuffers compiler, do not modify

import { NetAuthenticate } from "../daud-net/net-authenticate";
import { NetControlInput } from "../daud-net/net-control-input";
import { NetEvent } from "../daud-net/net-event";
import { NetExit } from "../daud-net/net-exit";
import { NetLeaderboard } from "../daud-net/net-leaderboard";
import { NetPing } from "../daud-net/net-ping";
import { NetSpawn } from "../daud-net/net-spawn";
import { NetWorldView } from "../daud-net/net-world-view";

export enum AllMessages {
    NONE = 0,
    NetWorldView = 1,
    NetSpawn = 2,
    NetEvent = 3,
    NetControlInput = 4,
    NetPing = 5,
    NetLeaderboard = 6,
    NetExit = 7,
    NetAuthenticate = 8,
}

export function unionToAllMessages(
    type: AllMessages,
    accessor: (
        obj: NetAuthenticate | NetControlInput | NetEvent | NetExit | NetLeaderboard | NetPing | NetSpawn | NetWorldView
    ) => NetAuthenticate | NetControlInput | NetEvent | NetExit | NetLeaderboard | NetPing | NetSpawn | NetWorldView | null
): NetAuthenticate | NetControlInput | NetEvent | NetExit | NetLeaderboard | NetPing | NetSpawn | NetWorldView | null {
    switch (AllMessages[type]) {
        case "NONE":
            return null;
        case "NetWorldView":
            return accessor(new NetWorldView())! as NetWorldView;
        case "NetSpawn":
            return accessor(new NetSpawn())! as NetSpawn;
        case "NetEvent":
            return accessor(new NetEvent())! as NetEvent;
        case "NetControlInput":
            return accessor(new NetControlInput())! as NetControlInput;
        case "NetPing":
            return accessor(new NetPing())! as NetPing;
        case "NetLeaderboard":
            return accessor(new NetLeaderboard())! as NetLeaderboard;
        case "NetExit":
            return accessor(new NetExit())! as NetExit;
        case "NetAuthenticate":
            return accessor(new NetAuthenticate())! as NetAuthenticate;
        default:
            return null;
    }
}

export function unionListToAllMessages(
    type: AllMessages,
    accessor: (
        index: number,
        obj: NetAuthenticate | NetControlInput | NetEvent | NetExit | NetLeaderboard | NetPing | NetSpawn | NetWorldView
    ) => NetAuthenticate | NetControlInput | NetEvent | NetExit | NetLeaderboard | NetPing | NetSpawn | NetWorldView | null,
    index: number
): NetAuthenticate | NetControlInput | NetEvent | NetExit | NetLeaderboard | NetPing | NetSpawn | NetWorldView | null {
    switch (AllMessages[type]) {
        case "NONE":
            return null;
        case "NetWorldView":
            return accessor(index, new NetWorldView())! as NetWorldView;
        case "NetSpawn":
            return accessor(index, new NetSpawn())! as NetSpawn;
        case "NetEvent":
            return accessor(index, new NetEvent())! as NetEvent;
        case "NetControlInput":
            return accessor(index, new NetControlInput())! as NetControlInput;
        case "NetPing":
            return accessor(index, new NetPing())! as NetPing;
        case "NetLeaderboard":
            return accessor(index, new NetLeaderboard())! as NetLeaderboard;
        case "NetExit":
            return accessor(index, new NetExit())! as NetExit;
        case "NetAuthenticate":
            return accessor(index, new NetAuthenticate())! as NetAuthenticate;
        default:
            return null;
    }
}
