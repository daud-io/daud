// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { NetAnnouncement } from "../daud-net/net-announcement";
import { NetBody } from "../daud-net/net-body";
import { NetGroup } from "../daud-net/net-group";

export class NetWorldView {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): NetWorldView {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsNetWorldView(bb: flatbuffers.ByteBuffer, obj?: NetWorldView): NetWorldView {
        return (obj || new NetWorldView()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsNetWorldView(bb: flatbuffers.ByteBuffer, obj?: NetWorldView): NetWorldView {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new NetWorldView()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    time(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
    }

    camera(obj?: NetBody): NetBody | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? (obj || new NetBody()).__init(this.bb_pos + offset, this.bb!) : null;
    }

    fleetid(): number {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
    }

    isalive(): boolean {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
    }

    updates(index: number, obj?: NetBody): NetBody | null {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? (obj || new NetBody()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 28, this.bb!) : null;
    }

    updatesLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    deletes(index: number): number | null {
        const offset = this.bb!.__offset(this.bb_pos, 14);
        return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
    }

    deletesLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 14);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    deletesArray(): Uint32Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 14);
        return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
    }

    groups(index: number, obj?: NetGroup): NetGroup | null {
        const offset = this.bb!.__offset(this.bb_pos, 16);
        return offset ? (obj || new NetGroup()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
    }

    groupsLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 16);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    groupdeletes(index: number): number | null {
        const offset = this.bb!.__offset(this.bb_pos, 18);
        return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
    }

    groupdeletesLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 18);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    groupdeletesArray(): Uint32Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 18);
        return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
    }

    announcements(index: number, obj?: NetAnnouncement): NetAnnouncement | null {
        const offset = this.bb!.__offset(this.bb_pos, 20);
        return offset ? (obj || new NetAnnouncement()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
    }

    announcementsLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 20);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    playercount(): number {
        const offset = this.bb!.__offset(this.bb_pos, 22);
        return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
    }

    spectatorcount(): number {
        const offset = this.bb!.__offset(this.bb_pos, 24);
        return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
    }

    cooldownshoot(): number {
        const offset = this.bb!.__offset(this.bb_pos, 26);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
    }

    cooldownboost(): number {
        const offset = this.bb!.__offset(this.bb_pos, 28);
        return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
    }

    worldsize(): number {
        const offset = this.bb!.__offset(this.bb_pos, 30);
        return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
    }

    customdata(): string | null;
    customdata(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    customdata(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 32);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }

    static startNetWorldView(builder: flatbuffers.Builder) {
        builder.startObject(15);
    }

    static addTime(builder: flatbuffers.Builder, time: number) {
        builder.addFieldInt32(0, time, 0);
    }

    static addCamera(builder: flatbuffers.Builder, cameraOffset: flatbuffers.Offset) {
        builder.addFieldStruct(1, cameraOffset, 0);
    }

    static addFleetid(builder: flatbuffers.Builder, fleetid: number) {
        builder.addFieldInt32(2, fleetid, 0);
    }

    static addIsalive(builder: flatbuffers.Builder, isalive: boolean) {
        builder.addFieldInt8(3, +isalive, +true);
    }

    static addUpdates(builder: flatbuffers.Builder, updatesOffset: flatbuffers.Offset) {
        builder.addFieldOffset(4, updatesOffset, 0);
    }

    static startUpdatesVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(28, numElems, 4);
    }

    static addDeletes(builder: flatbuffers.Builder, deletesOffset: flatbuffers.Offset) {
        builder.addFieldOffset(5, deletesOffset, 0);
    }

    static createDeletesVector(builder: flatbuffers.Builder, data: number[] | Uint32Array): flatbuffers.Offset;
    /**
     * @deprecated This Uint8Array overload will be removed in the future.
     */
    static createDeletesVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static createDeletesVector(builder: flatbuffers.Builder, data: number[] | Uint32Array | Uint8Array): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]!);
        }
        return builder.endVector();
    }

    static startDeletesVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addGroups(builder: flatbuffers.Builder, groupsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(6, groupsOffset, 0);
    }

    static createGroupsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startGroupsVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addGroupdeletes(builder: flatbuffers.Builder, groupdeletesOffset: flatbuffers.Offset) {
        builder.addFieldOffset(7, groupdeletesOffset, 0);
    }

    static createGroupdeletesVector(builder: flatbuffers.Builder, data: number[] | Uint32Array): flatbuffers.Offset;
    /**
     * @deprecated This Uint8Array overload will be removed in the future.
     */
    static createGroupdeletesVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static createGroupdeletesVector(builder: flatbuffers.Builder, data: number[] | Uint32Array | Uint8Array): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]!);
        }
        return builder.endVector();
    }

    static startGroupdeletesVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addAnnouncements(builder: flatbuffers.Builder, announcementsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(8, announcementsOffset, 0);
    }

    static createAnnouncementsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startAnnouncementsVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addPlayercount(builder: flatbuffers.Builder, playercount: number) {
        builder.addFieldInt32(9, playercount, 0);
    }

    static addSpectatorcount(builder: flatbuffers.Builder, spectatorcount: number) {
        builder.addFieldInt32(10, spectatorcount, 0);
    }

    static addCooldownshoot(builder: flatbuffers.Builder, cooldownshoot: number) {
        builder.addFieldInt8(11, cooldownshoot, 0);
    }

    static addCooldownboost(builder: flatbuffers.Builder, cooldownboost: number) {
        builder.addFieldInt8(12, cooldownboost, 0);
    }

    static addWorldsize(builder: flatbuffers.Builder, worldsize: number) {
        builder.addFieldInt16(13, worldsize, 0);
    }

    static addCustomdata(builder: flatbuffers.Builder, customdataOffset: flatbuffers.Offset) {
        builder.addFieldOffset(14, customdataOffset, 0);
    }

    static endNetWorldView(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }
}
