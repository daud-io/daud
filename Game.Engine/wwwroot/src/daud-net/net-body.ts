// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vec2 } from '../daud-net/vec2';


export class NetBody {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):NetBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

id():number {
  return this.bb!.readUint32(this.bb_pos);
}

definitiontime():number {
  return this.bb!.readUint32(this.bb_pos + 4);
}

originalposition(obj?:Vec2):Vec2|null {
  return (obj || new Vec2()).__init(this.bb_pos + 8, this.bb!);
}

velocity(obj?:Vec2):Vec2|null {
  return (obj || new Vec2()).__init(this.bb_pos + 12, this.bb!);
}

originalangle():number {
  return this.bb!.readInt8(this.bb_pos + 16);
}

angularvelocity():number {
  return this.bb!.readInt8(this.bb_pos + 17);
}

size():number {
  return this.bb!.readUint8(this.bb_pos + 18);
}

sprite():number {
  return this.bb!.readUint16(this.bb_pos + 20);
}

mode():number {
  return this.bb!.readUint8(this.bb_pos + 22);
}

group():number {
  return this.bb!.readUint32(this.bb_pos + 24);
}

static sizeOf():number {
  return 28;
}

static createNetBody(builder:flatbuffers.Builder, id: number, definitiontime: number, originalposition_x: number, originalposition_y: number, velocity_x: number, velocity_y: number, originalangle: number, angularvelocity: number, size: number, sprite: number, mode: number, group: number):flatbuffers.Offset {
  builder.prep(4, 28);
  builder.writeInt32(group);
  builder.pad(1);
  builder.writeInt8(mode);
  builder.writeInt16(sprite);
  builder.pad(1);
  builder.writeInt8(size);
  builder.writeInt8(angularvelocity);
  builder.writeInt8(originalangle);
  builder.prep(2, 4);
  builder.writeInt16(velocity_y);
  builder.writeInt16(velocity_x);
  builder.prep(2, 4);
  builder.writeInt16(originalposition_y);
  builder.writeInt16(originalposition_x);
  builder.writeInt32(definitiontime);
  builder.writeInt32(id);
  return builder.offset();
}

}
