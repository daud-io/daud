// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class NetPing {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):NetPing {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNetPing(bb:flatbuffers.ByteBuffer, obj?:NetPing):NetPing {
  return (obj || new NetPing()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNetPing(bb:flatbuffers.ByteBuffer, obj?:NetPing):NetPing {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NetPing()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

time():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

latency():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

fps():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

vps():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

ups():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

cs():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

backgrounded():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

bandwidththrottle():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

clienttime():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startNetPing(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addTime(builder:flatbuffers.Builder, time:number) {
  builder.addFieldInt32(0, time, 0);
}

static addLatency(builder:flatbuffers.Builder, latency:number) {
  builder.addFieldInt32(1, latency, 0);
}

static addFps(builder:flatbuffers.Builder, fps:number) {
  builder.addFieldInt32(2, fps, 0);
}

static addVps(builder:flatbuffers.Builder, vps:number) {
  builder.addFieldInt32(3, vps, 0);
}

static addUps(builder:flatbuffers.Builder, ups:number) {
  builder.addFieldInt32(4, ups, 0);
}

static addCs(builder:flatbuffers.Builder, cs:number) {
  builder.addFieldInt32(5, cs, 0);
}

static addBackgrounded(builder:flatbuffers.Builder, backgrounded:boolean) {
  builder.addFieldInt8(6, +backgrounded, +false);
}

static addBandwidththrottle(builder:flatbuffers.Builder, bandwidththrottle:number) {
  builder.addFieldInt32(7, bandwidththrottle, 0);
}

static addClienttime(builder:flatbuffers.Builder, clienttime:number) {
  builder.addFieldInt32(8, clienttime, 0);
}

static endNetPing(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNetPing(builder:flatbuffers.Builder, time:number, latency:number, fps:number, vps:number, ups:number, cs:number, backgrounded:boolean, bandwidththrottle:number, clienttime:number):flatbuffers.Offset {
  NetPing.startNetPing(builder);
  NetPing.addTime(builder, time);
  NetPing.addLatency(builder, latency);
  NetPing.addFps(builder, fps);
  NetPing.addVps(builder, vps);
  NetPing.addUps(builder, ups);
  NetPing.addCs(builder, cs);
  NetPing.addBackgrounded(builder, backgrounded);
  NetPing.addBandwidththrottle(builder, bandwidththrottle);
  NetPing.addClienttime(builder, clienttime);
  return NetPing.endNetPing(builder);
}
}
