// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { NetLeaderboardEntry } from "../daud-net/net-leaderboard-entry";

export class NetLeaderboard {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): NetLeaderboard {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsNetLeaderboard(bb: flatbuffers.ByteBuffer, obj?: NetLeaderboard): NetLeaderboard {
        return (obj || new NetLeaderboard()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsNetLeaderboard(bb: flatbuffers.ByteBuffer, obj?: NetLeaderboard): NetLeaderboard {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new NetLeaderboard()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    fleetid(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
    }

    type(): string | null;
    type(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    type(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }

    entries(index: number, obj?: NetLeaderboardEntry): NetLeaderboardEntry | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? (obj || new NetLeaderboardEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
    }

    entriesLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    record(obj?: NetLeaderboardEntry): NetLeaderboardEntry | null {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? (obj || new NetLeaderboardEntry()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
    }

    modedata(): string | null;
    modedata(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    modedata(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }

    static startNetLeaderboard(builder: flatbuffers.Builder) {
        builder.startObject(5);
    }

    static addFleetid(builder: flatbuffers.Builder, fleetid: number) {
        builder.addFieldInt32(0, fleetid, 0);
    }

    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, typeOffset, 0);
    }

    static addEntries(builder: flatbuffers.Builder, entriesOffset: flatbuffers.Offset) {
        builder.addFieldOffset(2, entriesOffset, 0);
    }

    static createEntriesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startEntriesVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addRecord(builder: flatbuffers.Builder, recordOffset: flatbuffers.Offset) {
        builder.addFieldOffset(3, recordOffset, 0);
    }

    static addModedata(builder: flatbuffers.Builder, modedataOffset: flatbuffers.Offset) {
        builder.addFieldOffset(4, modedataOffset, 0);
    }

    static endNetLeaderboard(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }
}
