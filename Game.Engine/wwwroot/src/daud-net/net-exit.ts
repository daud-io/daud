// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class NetExit {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):NetExit {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNetExit(bb:flatbuffers.ByteBuffer, obj?:NetExit):NetExit {
  return (obj || new NetExit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNetExit(bb:flatbuffers.ByteBuffer, obj?:NetExit):NetExit {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NetExit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

code():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startNetExit(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addCode(builder:flatbuffers.Builder, code:number) {
  builder.addFieldInt32(0, code, 0);
}

static endNetExit(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNetExit(builder:flatbuffers.Builder, code:number):flatbuffers.Offset {
  NetExit.startNetExit(builder);
  NetExit.addCode(builder, code);
  return NetExit.endNetExit(builder);
}
}
