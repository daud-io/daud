apiVersion: apps/v1
kind: Deployment
metadata:
  name: game-deployment
  labels:
    app: game
spec:
  replicas: 8
  selector:
    matchLabels:
      app: game
  template:
    metadata:
      name: game
      labels:
        app: game
    spec:
      containers:
        - name: game
          image: iodaud/daud:version-1.35
          env:
          - name: config__RegistryEnabled
            value: "true"
          - name: config__LetsEncryptEnabled
            value: "false"
          - name: config__RegistryUri
            value: "http://game-registry-internal:5001"
          - name: config__RegistryUserKey
            value: "Administrator"
          - name: config__RegistryPassword
            value: ""
          - name: config__NoWorlds
            value: "true"
          ports:
            - containerPort: 80
---
kind: Service
apiVersion: v1
metadata:
  name: game
spec:
  selector:
    app: game
  ports:
  - protocol: TCP
    port: 80
    nodePort: 30080
  type: NodePort
---
kind: Service
apiVersion: v1
metadata:
  name: game-internal
spec:
  selector:
    app: game
  ports:
  - protocol: TCP
    port: 80
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: game-robots
  labels:
    app: game-robots
spec:
  replicas: 20
  selector:
    matchLabels:
      app: game-robots
  template:
    metadata:
      name: game-robots
      labels:
        app: game-robots
    spec:
      containers:
        - name: game-robots
          image: iodaud/daud:version-1.34
          resources:
            #limits:
            #  cpu: "0.057"
            #requests:
            #  cpu: "0.057"
          command: ["dotnet"]
          args: ["/app/Game.Util/bin/Release/netcoreapp3.1/publish/Game.Util.dll",
            "--server", "http://game-internal/", 
            "--user-key", "Administrator", 
            "player", "robots",
            "--scenario", "https://raw.githubusercontent.com/daud-io/daud/master/Samples/Robots/Scenarios/A-v-B.json"
            ]
          env:
          - name: config__RegistryEnabled
            value: "false"
          volumeMounts:
            - name: nfsvol
              mountPath: /mnt/q
      volumes:
        - name: nfsvol
          persistentVolumeClaim:
            claimName: nfs-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: game-registry-deployment
  labels:
    app: game-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: game-registry
  template:
    metadata:
      name: game-registry
      labels:
        app: game-registry
    spec:
      containers:
        - name: game-registry
          image: iodaud/daud:version-1.34
          resources:
            #limits:
            #  cpu: "0.057"
            #requests:
            #  cpu: "0.057"
          command: ["dotnet"]
          args: ["/app/Game.Registry/bin/Release/netcoreapp3.1/publish/Game.Registry.dll"]
          env:
          - name: config__ElasticSearchURI
            value: "http://game-elastic:9200"
          - name: config__DisableSuggestionLookup
            value: "true"
          ports:
            - containerPort: 5001
---
kind: Service
apiVersion: v1
metadata:
  name: game-registry
spec:
  selector:
    app: game-registry
  ports:
  - protocol: TCP
    port: 5001
    nodePort: 31000
  type: NodePort
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elasticsearch
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: game-elastic-deployment
  labels:
    app: game-elastic
spec:
  replicas: 1
  selector:
    matchLabels:
      app: game-elastic
  template:
    metadata:
      name: game-elastic
      labels:
        app: game-elastic
    spec:
      serviceAccount: elasticsearch
      initContainers:
        # init-container for setting the mmap count limit
      - name: sysctl
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      containers:
      - name: elasticsearch
        securityContext:
        # applying fix in: https://github.com/kubernetes/kubernetes/issues/3595#issuecomment-287692878 
        # https://docs.docker.com/engine/reference/run/#operator-exclusive-options
          capabilities:
            add:
            # Lock memory (mlock(2), mlockall(2), mmap(2), shmctl(2))
            - IPC_LOCK  
            # Override resource Limits
            - SYS_RESOURCE      
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.6.1
        env:
          - name: "discovery.type"
            value: "single-node"
          - name: "bootstrap.memory_lock"
            value: "true"
          - name: "ES_JAVA_OPTS"
            value: "-Xms2g -Xmx2g"
        ports:
          - containerPort: 9200
        volumeMounts:
          - name: nfsvol
            mountPath: /usr/share/elasticsearch/data
            subPath: home/game/elastic
      volumes:
        - name: nfsvol
          persistentVolumeClaim:
            claimName: nfs-pvc
---
kind: Service
apiVersion: v1
metadata:
  name: game-elastic
spec:
  selector:
    app: game-elastic
  ports:
  - protocol: TCP
    port: 9200
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: game-kibana-deployment
  labels:
    app: game-kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: game-kibana
  template:
    metadata:
      name: game-kibana
      labels:
        app: game-kibana
    spec:
      containers:
        - name: game-kibana
          image: docker.elastic.co/kibana/kibana-oss:6.6.1
          env:
            - name: ELASTICSEARCH_URL
              value: "http://game-elastic:9200"
          ports:
            - containerPort: 5601
---
kind: Service
apiVersion: v1
metadata:
  name: game-kibana
spec:
  selector:
    app: game-kibana
  ports:
  - protocol: TCP
    port: 5601
    nodePort: 31601
  type: NodePort